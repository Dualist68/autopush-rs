# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKERHUB_ENDPOINT_REPO - same as DOCKERHUB_REPO, but for autoendpoint
# DOCKER_EMAIL   - login info for docker hub
# DOCKER_USER
# DOCKER_PASS
#
#

version: 2.1

defaults:
  docker_login: &docker_login
      run:
          name: Login to Dockerhub
          command: |
              if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
                  echo "Skipping Login to Dockerhub, no credentials."
              else
                  echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
              fi

jobs:
  audit:
    docker:
      - image: rust:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

    resource_class: large
    steps:
      - checkout
      - run:
          name: Setup cargo-audit
          command: |
            rustc --version
            cargo install cargo-audit
      - run:
          command: cargo audit

  test:
    docker:
      - image: circleci/python:3.10
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      - image: circleci/dynamodb
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        command: -sharedDb -inMemory
    resource_class: large
    environment:
      AWS_LOCAL_DYNAMODB: http://localhost:8000
    steps:
      - checkout
      # Need to download the requirements.txt files so we can use their
      # checksums in restore_cache.
      # - run:
      #     name: Download Python dependency lists
      #     command: |
      #       curl https://raw.githubusercontent.com/mozilla-services/autopush/master/requirements.txt > requirements.txt
      #       curl https://raw.githubusercontent.com/mozilla-services/autopush/master/test-requirements.txt > test-requirements.txt
      - restore_cache:
          name: Restoring Python cache
          key: python-v1-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
      - restore_cache:
          name: Restoring Rust cache
          key: rust-v1-{{ .Branch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Set up Python
          command: |
            pip install --upgrade pip
            pip install bottle
            pip install -r tests/requirements.txt
      - run:
          name: Set up Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            export PATH=$PATH:$HOME/.cargo/bin
            echo 'export PATH=$PATH:$HOME/.cargo/bin' >> $BASH_ENV
            rustc --version
            cargo build
      - run:
          name: Check formatting
          command: |
            cargo fmt -- --check
            cargo clippy --all --all-targets --all-features -- -D warnings --deny=clippy::dbg_macro
      - run:
          name: Integration tests
          command: |
            cd tests
            py.test -v
      - run:
          name: Rust tests
          command: cargo test
      - save_cache:
          name: Save Python cache
          key: python-v1-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
          paths:
            - /home/circleci/.local/bin/
            - /home/circleci/.local/lib/
      - save_cache:
          name: Save Rust cache
          key: rust-v1-{{ .Branch }}-{{ checksum "Cargo.lock" }}
          paths:
            - target
            - ~/.cargo/registry
            - ~/.cargo/git

  build:
    docker:
      - image: docker:18.03.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    resource_class: large
    working_directory: /dockerflow
    parameters:
      image:
        type: string
      crate:
        type: string
      binary:
        type: string
    steps:
      # Install these packages before checkout because git may not exist or work
      - run:
          name: Install Docker build dependencies
          command: apk add --no-cache openssh-client git
      - checkout
      - setup_remote_docker
      - *docker_login
      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      - run:
          name: Build Docker image
          command: |
            docker build -t <<parameters.image>> \
              --build-arg CRATE=<<parameters.crate>> \
              --build-arg BINARY=<<parameters.binary>> .
      # save the built docker container into CircleCI's workspace cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save <<parameters.image>>
          command: mkdir -p /cache; docker save -o /cache/docker.tar "<<parameters.image>>"
      - persist_to_workspace:
          root: /cache
          paths:
            - docker.tar

  deploy:
    docker:
      - image: docker:18.03.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    parameters:
      image:
        type: string
      repo:
        type: string
    steps:
      - setup_remote_docker
      - *docker_login
      - attach_workspace:
          at: /cache
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar
      - run:
          name: Deploy to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # deploy master
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag <<parameters.image>> <<parameters.repo>>:latest
              docker push <<parameters.repo>>:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
              # deploy a release tag
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "<<parameters.repo>>:${CIRCLE_TAG}"
              docker tag <<parameters.image>> "<<parameters.repo>>:${CIRCLE_TAG}"
              docker images
              docker push "<<parameters.repo>>:${CIRCLE_TAG}"
            fi

workflows:
  version: 2

  build-test-deploy:
    jobs:
      - audit:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
      - build:
          name: build-autopush
          image: autopush:build
          crate: autopush
          binary: autopush_rs
          filters:
            tags:
              only: /.*/

      - build:
          name: build-autoendpoint
          image: autoendpoint:build
          crate: autoendpoint
          binary: autoendpoint
          filters:
            tags:
              only: /.*/

      # Comment out the following two sections for local CircleCI testing.
      - deploy:
          name: deploy-autopush
          image: autopush:build
          repo: ${DOCKERHUB_REPO}
          requires:
            - build-autopush
            - test
          filters:
            tags:
              only: /.*/
            branches:
              only: master

      - deploy:
          name: deploy-autoendpoint
          image: autoendpoint:build
          repo: ${DOCKERHUB_ENDPOINT_REPO}
          requires:
            - build-autoendpoint
            - test
          filters:
            tags:
              only: /.*/
            branches:
              only: master
